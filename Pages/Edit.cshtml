@page
@model FitnessTracker.Pages.EditModel

@{
    ViewData["Title"] = "Edit";
}

<h1>Edit</h1>

<hr />
<div class="row">
    <div class="col-md-4">
        <form method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="LogEntryData.Id" />
            <div class="form-group">
                <label asp-for="LogEntryData.Date" class="control-label"></label>
                <input type="date" asp-for="LogEntryData.Date" class="form-control" />
                <span asp-validation-for="LogEntryData.Date" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="LogEntryData.ExerciseName" class="control-label"></label>
                <input id="exerciseSearch" type="text" asp-for="LogEntryData.ExerciseName" class="form-control" placeholder="Search exercises..." autocomplete="off" />
                <div id="searchResults" class="dropdown"></div>
                <span asp-validation-for="LogEntryData.ExerciseName" class="text-danger"></span>
            </div>
            <div class="form-group" hidden>
                <label asp-for="LogEntryData.ExerciseId" class="control-label"></label>
                <input id="exerciseId" asp-for="LogEntryData.ExerciseId" class="form-control" />
                <span asp-validation-for="LogEntryData.ExerciseId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="LogEntryData.Sets" class="control-label"></label>
                <input asp-for="LogEntryData.Sets" class="form-control" />
                <span asp-validation-for="LogEntryData.Sets" class="text-danger"></span>
            </div>
            <div class="form-group" id="timeFieldContainer">
                <label asp-for="LogEntryData.Time" class="control-label"></label>
                <input asp-for="LogEntryData.Time" class="form-control" id="timeField" />
                <span asp-validation-for="LogEntryData.Time" class="text-danger"></span>
            </div>
            <div class="form-group" id="repsFieldContainer">
                <label asp-for="LogEntryData.Reps" class="control-label"></label>
                <input asp-for="LogEntryData.Reps" class="form-control" id="repsField" />
                <span asp-validation-for="LogEntryData.Reps" class="text-danger"></span>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="LogEntryData.IsTimeBasedExercise" onchange="timeToggleChanged(this.checked)" id="timeToggle"/> @Html.DisplayNameFor(model => model.LogEntryData.IsTimeBasedExercise)
                </label>
            </div>
            <div class="form-group">
                <input type="submit" value="Save Changes" class="btn btn-success" /> |
                <a button type="button" class="btn btn-danger" asp-page="./Index">Cancel</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
                function clearExerciseId()
                {
                    document.getElementById("exerciseId").value = "";
                }

                function timeToggleChanged(isChecked)
                {
                    if(isChecked)
                    {
                        document.getElementById("timeFieldContainer").style.display = "block";
                        document.getElementById("repsFieldContainer").style.display = "none";
                    }
                    else
                    {
                        document.getElementById("repsFieldContainer").style.display = "block";
                        document.getElementById("timeFieldContainer").style.display = "none";
                    }
                }

                document.addEventListener("DOMContentLoaded", function() {
                    var isChecked = document.getElementById("timeToggle").checked;
                    timeToggleChanged(isChecked);
                });

                let timer;

        document.getElementById("exerciseSearch").addEventListener("input", function(e) {
            clearTimeout(timer);
            const query = e.target.value;
            clearExerciseId();

            if(query.length < 2) return;

            timer = setTimeout(() => {
                fetch(`?handler=Search&query=${encodeURIComponent(query)}`)
                .then(res => res.json())
                .then(data => {
                    let resultsDiv = document.getElementById("searchResults");
                    resultsDiv.innerHTML = "";

                    data.forEach(item => {
                        let option = document.createElement("div");
                        option.textContent = item.name;
                        option.classList.add("dropdown-item");

                        option.addEventListener("click", () => {
                            document.getElementById("exerciseSearch").value = item.name;
                            document.getElementById("exerciseId").value = item.exerciseId;
                            resultsDiv.innerHTML = "";
                        });

                        resultsDiv.appendChild(option);
                    });
                });
            }, 300);
        });
    </script>
}
